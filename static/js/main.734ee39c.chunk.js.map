{"version":3,"sources":["components/Navbar.js","components/Footer.js","ScrollToTop.js","App.js","serviceWorkerRegistration.js","index.js"],"names":["Navbar","React","useState","width","menuStyle","setMenuStyle","closeMenu","className","exact","to","onClick","id","style","Footer","ScrollToTop","pathname","useLocation","useEffect","window","scrollTo","HeroSection","lazy","About","Catalogo","Filme","Search","App","basename","fallback","height","path","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"yMAGe,SAASA,IAAU,IAAD,EACGC,IAAMC,SAAS,CAC/CC,MAAO,MAFsB,mBACxBC,EADwB,KACbC,EADa,KAKzBC,EAAY,kBAAMD,EAAa,CAACF,MAAO,OAG7C,OACE,sBAAKI,UAAU,SAAf,UACE,qBAAKA,UAAU,WAAf,SACE,cAAC,IAAD,CAAMC,OAAO,EAAMC,GAAG,IAAIC,QAASJ,EAAnC,4BAEF,sBAAKC,UAAU,YAAf,UACE,cAAC,IAAD,CAAME,GAAG,YAAT,mCACA,cAAC,IAAD,CAAMA,GAAG,SAAT,6BAEF,sBAAKE,GAAG,YAAYJ,UAAU,UAAUK,MAAOR,EAA/C,UACE,wBAAQG,UAAU,WAAWG,QAASJ,EAAtC,kBACA,cAAC,IAAD,CAAMG,GAAG,YAAYC,QAASJ,EAA9B,mCACA,cAAC,IAAD,CAAMG,GAAG,SAASC,QAASJ,EAA3B,6BAEF,mBAAGC,UAAU,oBAAoBG,QAAS,kBAAML,EAAa,CAACF,MAAO,gBCvB5D,SAASU,IACtB,OACE,iCACE,0D,WCFS,SAASC,IAAe,IAC7BC,EAAaC,cAAbD,SAMR,OAJAE,qBAAU,WACRC,OAAOC,SAAS,EAAG,KAClB,CAACJ,IAEG,KCGT,IAAMK,EAAcnB,IAAMoB,MAAK,kBAAM,gCAC/BC,EAAQrB,IAAMoB,MAAK,kBAAM,gCACzBE,EAAWtB,IAAMoB,MAAK,kBAAM,sDAC5BG,EAAQvB,IAAMoB,MAAK,kBAAM,sDACzBI,EAASxB,IAAMoB,MAAK,kBAAM,gCAEjB,SAASK,IAEtB,OACE,eAAC,IAAD,CAAYC,SAAS,IAArB,UACE,cAACb,EAAD,IACA,sBAAKP,UAAU,MAAf,UACE,cAACP,EAAD,IACA,cAAC,IAAD,UACE,eAAC,WAAD,CAAU4B,SAAU,qBAAKhB,MAAO,CAACiB,OAAQ,UAAzC,UACE,cAAC,IAAD,CAAOC,KAAK,IAAItB,OAAK,EAArB,SACE,cAACY,EAAD,MAGF,cAAC,IAAD,CAAOU,KAAK,YAAZ,SACE,cAACP,EAAD,MAGF,cAAC,IAAD,CAAOO,KAAK,SAAZ,SACE,cAACR,EAAD,MAGF,cAAC,IAAD,CAAOQ,KAAK,aAAZ,SACE,cAACN,EAAD,MAGF,cAAC,IAAD,CAAOM,KAAK,iBAAZ,SACE,cAACL,EAAD,WAIN,cAACZ,EAAD,UCrCR,IAAMkB,EAAcC,QACW,cAA7Bd,OAAOe,SAASC,UAEe,UAA7BhB,OAAOe,SAASC,UAEhBhB,OAAOe,SAASC,SAASC,MAAM,2DAqCnC,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAACC,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,+GAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAACC,GACNL,QAAQK,MAAM,4CAA6CA,MCxFjEC,iBACE,cAAC,IAAMC,WAAP,UACE,cAAC/B,EAAD,MAEFgC,SAASC,eAAe,SDUnB,SAAkBrB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIqB,IAAIC,eAAwB3C,OAAOe,SAAS6B,MACpDC,SAAW7C,OAAOe,SAAS8B,OAIvC,OAGF7C,OAAO8C,iBAAiB,QAAQ,WAC9B,IAAM3B,EAAK,UAAMwB,eAAN,sBAEP9B,IAgEV,SAAiCM,EAAOC,GAEtC2B,MAAM5B,EAAO,CACX6B,QAAS,CAAE,iBAAkB,YAE5BxB,MAAK,SAACyB,GAEL,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5ChC,UAAUC,cAAcgC,MAAM9B,MAAK,SAACC,GAClCA,EAAa8B,aAAa/B,MAAK,WAC7BxB,OAAOe,SAASyC,eAKpBtC,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IAAI,oEAtFVwB,CAAwBtC,EAAOC,GAI/BC,UAAUC,cAAcgC,MAAM9B,MAAK,WACjCQ,QAAQC,IACN,+GAMJf,EAAgBC,EAAOC,OChC/BsC,K","file":"static/js/main.734ee39c.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Link } from \"react-router-dom\"\r\n\r\nexport default function Navbar() {\r\n  const [menuStyle, setMenuStyle] = React.useState({\r\n    width: '0'\r\n  })\r\n\r\n  const closeMenu = () => setMenuStyle({width: '0'});\r\n\r\n  \r\n  return (\r\n    <nav className=\"Navbar\">\r\n      <div className='leftSide'>\r\n        <Link exact={true} to=\"/\" onClick={closeMenu}>Spoiler Zone</Link>\r\n      </div>\r\n      <div className='rightSide'>\r\n        <Link to=\"/catalogo\">Catálogo de filmes</Link>\r\n        <Link to=\"/sobre\">Sobre o site</Link>\r\n      </div>\r\n      <div id=\"mySidenav\" className=\"sidenav\" style={menuStyle}>\r\n        <button className=\"closebtn\" onClick={closeMenu}>&times;</button>\r\n        <Link to=\"/catalogo\" onClick={closeMenu}>Catálogo de filmes</Link>\r\n        <Link to=\"/sobre\" onClick={closeMenu}>Sobre o site</Link>\r\n      </div>\r\n      <i className=\"fas fa-bars fa-2x\" onClick={() => setMenuStyle({width: '250px'})}></i>\r\n    </nav>\r\n  );\r\n}","import React from 'react'\r\n\r\nexport default function Footer() {\r\n  return (\r\n    <footer>\r\n      <p>Almir Leandro &#169; 2021</p>\r\n    </footer>\r\n  )\r\n}","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n  const { pathname } = useLocation();\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [pathname]);\r\n\r\n  return null;\r\n}","import React, { Suspense } from 'react'\n\nimport Navbar from './components/Navbar'\nimport Footer from './components/Footer'\n\nimport ScrollToTop from './ScrollToTop'\n\nimport {\n  Switch,\n  Route,\n  HashRouter\n} from \"react-router-dom\"\n\nconst HeroSection = React.lazy(() => import('./components/HeroSection'));\nconst About = React.lazy(() => import('./components/About'));\nconst Catalogo = React.lazy(() => import('./components/Catalogo'));\nconst Filme = React.lazy(() => import('./components/Filme'));\nconst Search = React.lazy(() => import('./components/Search'));\n\nexport default function App() {\n\n  return (\n    <HashRouter basename='/'>\n      <ScrollToTop />\n      <div className=\"App\">\n        <Navbar />\n        <Switch>\n          <Suspense fallback={<div style={{height: '93vh'}}></div>}>\n            <Route path='/' exact>\n              <HeroSection />\n            </Route>\n\n            <Route path='/catalogo'>\n              <Catalogo />\n            </Route>\n\n            <Route path='/sobre'>\n              <About />\n            </Route>\n\n            <Route path='/filme/:id'>\n              <Filme />\n            </Route>\n\n            <Route path='/search/:query'>\n              <Search />\n            </Route>\n          </Suspense>\n        </Switch>\n        <Footer />\n      </div>\n    </HashRouter>\n  );\n}\n\n\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}","import React from 'react';\nimport { render } from 'react-snapshot';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nrender(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();"],"sourceRoot":""}