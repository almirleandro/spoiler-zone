[{"C:\\Users\\leand\\Documents\\Coding\\react\\spoiler-zone\\src\\index.js":"1","C:\\Users\\leand\\Documents\\Coding\\react\\spoiler-zone\\src\\App.js":"2","C:\\Users\\leand\\Documents\\Coding\\react\\spoiler-zone\\src\\components\\HeroSection.js":"3","C:\\Users\\leand\\Documents\\Coding\\react\\spoiler-zone\\src\\components\\Footer.js":"4","C:\\Users\\leand\\Documents\\Coding\\react\\spoiler-zone\\src\\components\\Navbar.js":"5","C:\\Users\\leand\\Documents\\Coding\\react\\spoiler-zone\\src\\components\\About.js":"6","C:\\Users\\leand\\Documents\\Coding\\react\\spoiler-zone\\src\\components\\Catalogo.js":"7","C:\\Users\\leand\\Documents\\Coding\\react\\spoiler-zone\\src\\components\\Filme.js":"8","C:\\Users\\leand\\Documents\\Coding\\react\\spoiler-zone\\src\\firebase.js":"9"},{"size":219,"mtime":1608422859872,"results":"10","hashOfConfig":"11"},{"size":1256,"mtime":1609342388201,"results":"12","hashOfConfig":"11"},{"size":1086,"mtime":1609361415752,"results":"13","hashOfConfig":"11"},{"size":152,"mtime":1608521312369,"results":"14","hashOfConfig":"11"},{"size":875,"mtime":1609593133273,"results":"15","hashOfConfig":"11"},{"size":1311,"mtime":1609522495162,"results":"16","hashOfConfig":"11"},{"size":3256,"mtime":1609527416336,"results":"17","hashOfConfig":"11"},{"size":4687,"mtime":1609525638329,"results":"18","hashOfConfig":"11"},{"size":508,"mtime":1609419601696,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"w5j4xk",{"filePath":"23","messages":"24","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"22"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"C:\\Users\\leand\\Documents\\Coding\\react\\spoiler-zone\\src\\index.js",[],["42","43"],"C:\\Users\\leand\\Documents\\Coding\\react\\spoiler-zone\\src\\App.js",["44","45"],"import React, { useState } from 'react'\n\nimport Navbar from './components/Navbar'\nimport HeroSection from './components/HeroSection'\nimport Footer from './components/Footer'\n\nimport About from './components/About'\nimport Catalogo from './components/Catalogo'\nimport Filme from './components/Filme'\n\nimport {\n  Switch,\n  Route,\n  HashRouter\n} from \"react-router-dom\"\n\nexport default function App() {\n  const [query, setQuery] = useState('');\n  const [movies, setMovies] = useState([]);\n  const [filmeID, setFilmeID] = useState('');\n\n  return (\n    <HashRouter basename='/'>\n      <div className=\"App\">\n        <Switch>\n\n          <Route path='/' exact>\n            <Navbar />\n            <HeroSection query={query} setQuery={setQuery} setMovies={setMovies} />\n            <Footer />\n          </Route>\n\n          <Route path='/catalogo'>\n            <Navbar />\n            <Catalogo />\n            <Footer />\n          </Route>\n\n          <Route path='/sobre'>\n            <Navbar />\n            <About />\n            <Footer />\n          </Route>\n\n          <Route path={`/filme/:id`}>\n            <Navbar />\n            <Filme setFilmeID={setFilmeID} />\n            <Footer />\n          </Route>\n\n        </Switch>\n      </div>\n    </HashRouter>\n  );\n}\n\n\n","C:\\Users\\leand\\Documents\\Coding\\react\\spoiler-zone\\src\\components\\HeroSection.js",[],"C:\\Users\\leand\\Documents\\Coding\\react\\spoiler-zone\\src\\components\\Footer.js",[],"C:\\Users\\leand\\Documents\\Coding\\react\\spoiler-zone\\src\\components\\Navbar.js",[],"C:\\Users\\leand\\Documents\\Coding\\react\\spoiler-zone\\src\\components\\About.js",[],"C:\\Users\\leand\\Documents\\Coding\\react\\spoiler-zone\\src\\components\\Catalogo.js",["46"],"import React, { useState, useEffect } from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport firebase from '../firebase';\r\n\r\nexport default function Catalogo() {\r\n\r\n  const [movieList, setMovieList] = useState([]);\r\n\r\n  const ref = firebase.firestore().collection(\"moviespoilersdb\");\r\n  const getMovieList = () => {\r\n    ref.onSnapshot((querySnapshot) => {\r\n      const items = [];\r\n      querySnapshot.forEach((doc) => {\r\n          items.push(doc.data());\r\n      });\r\n\r\n      setMovieList(items);\r\n\r\n    });\r\n  };\r\n\r\n  \r\n  useEffect(() => {\r\n    getMovieList();\r\n  }, []);\r\n  \r\n  \r\n  function getLetterArray(items, letter) {\r\n    const getLetter = items.filter(item => item.titulo.slice(0,1) === letter);\r\n    const letterArray = getLetter.map(item => {\r\n      return <p key={item.id} className='movieLink'><Link to={`filme/${item.id}`}>{item.titulo} ({item.ano})</Link></p>\r\n    })\r\n    return letterArray;\r\n  }\r\n\r\n\r\n  return (\r\n    <main className='Catalogo'>\r\n      <h1>CATÁLOGO DE FILMES</h1>\r\n      {movieList[0] ? <div>\r\n        <p className='letterDiv'>A</p>\r\n        {getLetterArray(movieList, 'A')}\r\n        <p className='letterDiv'>B</p>\r\n        {getLetterArray(movieList, 'B')}\r\n        <p className='letterDiv'>C</p>\r\n        {getLetterArray(movieList, 'C')}\r\n        <p className='letterDiv'>D</p>\r\n        {getLetterArray(movieList, 'D')}\r\n        <p className='letterDiv'>E</p>\r\n        {getLetterArray(movieList, 'E')}\r\n        <p className='letterDiv'>F</p>\r\n        {getLetterArray(movieList, 'F')}\r\n        <p className='letterDiv'>G</p>\r\n        {getLetterArray(movieList, 'G')}\r\n        <p className='letterDiv'>H</p>\r\n        {getLetterArray(movieList, 'H')}\r\n        <p className='letterDiv'>I</p>\r\n        {getLetterArray(movieList, 'I')}\r\n        <p className='letterDiv'>J</p>\r\n        {getLetterArray(movieList, 'J')}\r\n        <p className='letterDiv'>K</p>\r\n        {getLetterArray(movieList, 'K')}\r\n        <p className='letterDiv'>L</p>\r\n        {getLetterArray(movieList, 'L')}\r\n        <p className='letterDiv'>M</p>\r\n        {getLetterArray(movieList, 'M')}\r\n        <p className='letterDiv'>N</p>\r\n        {getLetterArray(movieList, 'N')}\r\n        <p className='letterDiv'>O</p>\r\n        {getLetterArray(movieList, 'O')}\r\n        <p className='letterDiv'>P</p>\r\n        {getLetterArray(movieList, 'P')}\r\n        <p className='letterDiv'>Q</p>\r\n        {getLetterArray(movieList, 'Q')}\r\n        <p className='letterDiv'>R</p>\r\n        {getLetterArray(movieList, 'R')}\r\n        <p className='letterDiv'>S</p>\r\n        {getLetterArray(movieList, 'S')}\r\n        <p className='letterDiv'>T</p>\r\n        {getLetterArray(movieList, 'T')}\r\n        <p className='letterDiv'>U</p>\r\n        {getLetterArray(movieList, 'U')}\r\n        <p className='letterDiv'>V</p>\r\n        {getLetterArray(movieList, 'V')}\r\n        <p className='letterDiv'>W</p>\r\n        {getLetterArray(movieList, 'W')}\r\n        <p className='letterDiv'>X</p>\r\n        {getLetterArray(movieList, 'X')}\r\n        <p className='letterDiv'>Y</p>\r\n        {getLetterArray(movieList, 'Y')}\r\n        <p className='letterDiv'>Z</p>\r\n        {getLetterArray(movieList, 'Z')}\r\n      </div> : <p className='letterDiv'>Carregando filmes...</p>}\r\n    </main>\r\n  )\r\n}","C:\\Users\\leand\\Documents\\Coding\\react\\spoiler-zone\\src\\components\\Filme.js",["47"],"import React, { useState, useEffect } from 'react';\r\nimport { useParams } from \"react-router-dom\";\r\nimport firebase from '../firebase';\r\n\r\nexport default function Filme(props) {\r\n  const [movieInfo, setMovieInfo] = useState();\r\n  const [direction, setDirection] = useState();\r\n  const [streamers, setStreamers] = useState();\r\n  const [spoilersDB, setspoilersDB] = useState([]);\r\n\r\n  // Get url path\r\n  const { id } = useParams();\r\n  const filmeID = id;\r\n  \r\n  // Get spoilers from database\r\n  const ref = firebase.firestore().collection(\"moviespoilersdb\");\r\n  const getSpoilers = () => {\r\n    ref.onSnapshot((querySnapshot) => {\r\n      const items = [];\r\n      querySnapshot.forEach((doc) => {\r\n          items.push(doc.data());\r\n      });\r\n      \r\n      const DBinfo = items.filter(item => item.id === filmeID);\r\n\r\n      if (DBinfo[0] === undefined) { // Tentar lembrar por que eu coloquei esse if aqui (lembrei: foi para poder exibir páginas que ainda não têm spoilers (ainda dá para melhorar))\r\n        console.log('Filme não contém spoilers no banco de dados');\r\n      } else {\r\n        setspoilersDB(DBinfo[0].spoilers);\r\n      }\r\n    });\r\n  }\r\n\r\n  // API calls\r\n  const getMovie = async () => {    \r\n    const url = `https://api.themoviedb.org/3/movie/${filmeID}?api_key=53d1ed1dbd54c7022b78b3f3b8a42342&language=pt-BR`;\r\n    \r\n    try {\r\n      const res = await fetch(url);\r\n      const data  = await res.json();\r\n      setMovieInfo(data);\r\n      // console.log(data);\r\n    }catch(err){\r\n      console.error(err);\r\n    }\r\n  }\r\n  const getDirector = async () => {    \r\n    const url = `https://api.themoviedb.org/3/movie/${filmeID}/credits?api_key=53d1ed1dbd54c7022b78b3f3b8a42342&language=en-US`;\r\n    \r\n    try {\r\n      const res = await fetch(url);\r\n      const data  = await res.json();\r\n\r\n      const directorsArray = data.crew.filter(item => item.job === 'Director');\r\n      const directorsName = directorsArray.map((item, index) => {\r\n        if (directorsArray.length > 1 && index + 1 === directorsArray.length) {\r\n          return 'e ' + item.name;\r\n        } else if (index + 1 === directorsArray.length - 1) {\r\n          return item.name + ' ';\r\n        } else if (index + 1 < directorsArray.length) {\r\n          return item.name + ', ';\r\n        } else {\r\n          return item.name;\r\n        }\r\n      });\r\n\r\n      setDirection(directorsName);\r\n      // console.log(directorsName);\r\n    }catch(err){\r\n      console.error(err);\r\n    }\r\n  }\r\n  const getStreaming = async () => {    \r\n    const url = `https://api.themoviedb.org/3/movie/${filmeID}/watch/providers?api_key=53d1ed1dbd54c7022b78b3f3b8a42342`;\r\n    \r\n    try {\r\n      const res = await fetch(url);\r\n      const data  = await res.json();\r\n\r\n      const streamersArray = data.results.BR.flatrate;\r\n      const BRStream = streamersArray.map((item, index) => {\r\n        if (streamersArray.length > 1 && index + 1 === streamersArray.length) {\r\n          return 'e ' + item.provider_name;\r\n        } else if (index + 1 === streamersArray.length - 1) {\r\n          return item.provider_name + ' ';\r\n        } else if (index + 1 < streamersArray.length) {\r\n          return item.provider_name + ', ';\r\n        } else {\r\n          return item.provider_name;\r\n        }\r\n      });\r\n\r\n      setStreamers(BRStream);\r\n      // console.log(BRStream);\r\n    }catch(err){\r\n      console.error(err);\r\n    }\r\n  }\r\n\r\n  // Call them any time the url changes (and at first render)\r\n  useEffect(() => {\r\n    getMovie();\r\n    getDirector();\r\n    getStreaming();\r\n    getSpoilers();\r\n    props.setFilmeID(filmeID);\r\n  }, [filmeID]);\r\n\r\n  // Put the spoiler in a JSX format\r\n  const spoilersArray = spoilersDB.map(item => {\r\n    return <p key={item.key}><b>{item.pergunta}</b> {item.text}</p>\r\n  });\r\n\r\n  return (\r\n    <main className='Filme'>\r\n      {movieInfo ? <div className='movieHeader'>\r\n        <img src={'https://image.tmdb.org/t/p/w342' + movieInfo.poster_path} alt={spoilersDB.titulo}/>\r\n        <div className='movieDescription'>\r\n          <h1>{movieInfo.title} ({movieInfo.release_date.slice(0,4)})</h1>\r\n          {movieInfo.tagline ? <p id='tagline'><em>\"{movieInfo.tagline}\"</em></p> : null}\r\n          <p><b>Título original:</b> {movieInfo.original_title}</p>\r\n          <p><b>Direção:</b> {direction}</p>\r\n          <p><b>Sinopse:</b> {movieInfo.overview ? movieInfo.overview : 'Não disponível'}</p>\r\n          <p><b>Disponível para streaming no Brasil em:</b> {streamers ? streamers : 'Não disponível'}</p>\r\n        </div>\r\n      </div> : null}\r\n      <div className='spoilerDivision'>Spoilers a seguir</div>\r\n      <div className='spoilers'>\r\n        {spoilersArray}\r\n      </div>\r\n    </main>\r\n  )\r\n}","C:\\Users\\leand\\Documents\\Coding\\react\\spoiler-zone\\src\\firebase.js",[],{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","severity":1,"message":"53","line":19,"column":10,"nodeType":"54","messageId":"55","endLine":19,"endColumn":16},{"ruleId":"52","severity":1,"message":"56","line":20,"column":10,"nodeType":"54","messageId":"55","endLine":20,"endColumn":17},{"ruleId":"57","severity":1,"message":"58","line":25,"column":6,"nodeType":"59","endLine":25,"endColumn":8,"suggestions":"60"},{"ruleId":"57","severity":1,"message":"61","line":107,"column":6,"nodeType":"59","endLine":107,"endColumn":15,"suggestions":"62"},"no-native-reassign",["63"],"no-negated-in-lhs",["64"],"no-unused-vars","'movies' is assigned a value but never used.","Identifier","unusedVar","'filmeID' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getMovieList'. Either include it or remove the dependency array.","ArrayExpression",["65"],"React Hook useEffect has missing dependencies: 'getDirector', 'getMovie', 'getSpoilers', 'getStreaming', and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["66"],"no-global-assign","no-unsafe-negation",{"desc":"67","fix":"68"},{"desc":"69","fix":"70"},"Update the dependencies array to be: [getMovieList]",{"range":"71","text":"72"},"Update the dependencies array to be: [filmeID, getDirector, getMovie, getSpoilers, getStreaming, props]",{"range":"73","text":"74"},[578,580],"[getMovieList]",[3573,3582],"[filmeID, getDirector, getMovie, getSpoilers, getStreaming, props]"]